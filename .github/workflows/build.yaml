name: Build Images

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      diff_branch:
        description: 'Upstream branch for determining changes'
        default: 'master'
        required: false
      run_all:
        description: 'Run all builds regardless of changes?'
        default: 'false'
        required: false

jobs:
  create_matrix:
    runs-on: ubuntu-latest
    name: Create Build Matrix
    outputs:
      build_matrix: ${{ steps.set-build-matrix.outputs.matrix }}
      manifest_matrix: ${{ steps.set-manifest-matrix.outputs.matrix }}
    env:
      changed_only: ''
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Echo manual trigger params
        if: github.event_name == 'workflow_dispatch'
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Set upstream branch
        run: |
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
            then
                echo UPSTREAM_BRANCH=${{ github.event.inputs.diff_branch }} >> $GITHUB_ENV
            else
                echo UPSTREAM_BRANCH=master >> $GITHUB_ENV
            fi
      - name: Enable changed-only parameter for matrix build
        if: >-
            (
                github.event_name != 'workflow_run' ||
                (github.event_name == 'workflow_run' && toJSON(github.event.workflow_run.inputs.run_all) == false)
            )
        run: echo changed_only='--changed-only' >> $GITHUB_ENV

      - name: Build job matrices
        run: >-
            echo matrix=`python ci/build_matrix.py --upstream ${{ env.UPSTREAM_BRANCH }}
            --manifest ${{ env.changed_only }} latest ${{ github.sha }}` >> $GITHUB_ENV

      - name: Set build matrix
        id: set-build-matrix
        run: |
            export build_matrix=`echo '${{ env.matrix }}' | jq -c '.build'`
            echo "::set-output name=matrix::$build_matrix"
      - name: Echo build matrix variable
        run: |
            cat << EOF
            ${{ steps.set-build-matrix.outputs.matrix }}
            EOF
      - name: Sanity check by parsing build matrix using fromJSON
        run: echo ${{ fromJSON(steps.set-build-matrix.outputs.matrix) }}

      - name: Set manifest matrix
        id: set-manifest-matrix
        run: |
            export manifest_matrix=`echo '${{ env.matrix }}' | jq -c '.manifest'`
            echo "::set-output name=matrix::$manifest_matrix"
      - name: Echo manifest matrix variable
        run: |
            cat << EOF
            ${{ steps.set-manifest-matrix.outputs.matrix }}
            EOF
      - name: Sanity check by parsing manifest matrix using fromJSON
        run: echo ${{ fromJSON(steps.set-manifest-matrix.outputs.matrix) }}

  build_push:
    needs: create_matrix
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJSON(needs.create_matrix.outputs.build_matrix) }}
      fail-fast: false
    name: Build ${{ matrix.benchmark }} on ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v2
      - name: Echo Matrix Permutation
        run: |
            cat << EOF
            ${{ toJSON(matrix) }}
            EOF
      - name: Set quay organization
        run: |
            export org_secret="${{ secrets.QUAY_ORG }}"
            export org=${org_secret:-cloud-bulldozer}
            echo "Using organization: $org"
            echo "quay_org=$org" >> $GITHUB_ENV
      - name: Update apt cache
        run: sudo apt update
      - name: Install podman and qemu-user-static
        run: sudo apt install -y podman qemu-user-static
      - name: Build ${{ matrix.containerfile }}
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          arch: ${{ matrix.arch }}
          image: ${{ matrix.image_name }}
          tags: ${{ matrix.tags }}
          dockerfiles: ${{ matrix.dockerfile }}
      - name: Push ${{ matrix.dockerfile }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/${{ env.quay_org }}
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Print image URL
        run: echo "Image pushed to ${{ steps.push-image.outputs.registry-paths }}"

  update_manifest:
    needs:
      - create_matrix
      - build_push
    if: always()
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJSON(needs.create_matrix.outputs.manifest_matrix) }}
      fail-fast: false
    name: Push Manifest ${{ matrix.image_name }}:${{ matrix.tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Echo Matrix Permutation
        run: |
            cat << EOF
            ${{ toJSON(matrix) }}
            EOF
      - name: Set quay organization
        run: |
            export org_secret="${{ secrets.QUAY_ORG }}"
            export org=${org_secret:-cloud-bulldozer}
            echo "Using organization: $org"
            echo "quay_org=$org" >> $GITHUB_ENV
      - name: Update apt cache
        run: sudo apt update
      - name: Install podman and qemu-user-static
        run: sudo apt install -y podman qemu-user-static
      - name: Login to quay
        run: >-
            podman login quay.io --username ${{ secrets.QUAY_USER }}
            --password ${{ secrets.QUAY_TOKEN }}
      - name: Create manifest
        run: |
            manifest="quay.io/${{ env.quay_org }}/${{ matrix.image_name }}:${{ matrix.tag }}"
            echo "Updating manifest ${manifest} ..."
            podman manifest create ${manifest}
            for suffix in ${{ matrix.tag_suffixes }}
            do
                echo "Adding ${manifest}${suffix} to the manifest ..."
                podman manifest add ${manifest} ${manifest}${suffix}
            done
            echo "Pushing manifest to quay ..."
            podman manifest push ${manifest} ${manifest}
            echo "Done!"
