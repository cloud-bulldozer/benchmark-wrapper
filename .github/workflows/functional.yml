name: Build Images
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      diff_branch:
        description: 'Upstream branch for determining changes'
        default: 'master'
      run_all:
        description: 'Run all tests regardless of changes?'
        default: 'false'
env:
  IMAGE_REGISTRY: quay.io
  IMAGE_USER: rydrew
jobs:
  find-cfs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Echo manual trigger params
        if: github.event_name == 'workflow_dispatch'
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Set upstream branch
        run: |
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]
            then
                echo UPSTREAM_BRANCH=${{ github.event.inputs.diff_branch }} >> $GITHUB_ENV
            else
                echo UPSTREAM_BRANCH=master >> $GITHUB_ENV
            fi
      - name: Fetch upstream branch
        run: git fetch origin ${{ env.UPSTREAM_BRANCH }}
      - name: Echo git information
        run: |
            echo "Current branch: `git branch --show-current`"
            echo "Origin URL(s): `git remote get-url origin`"
            echo "Changes: `git diff origin/${{ env.UPSTREAM_BRANCH }} --name-only`"
      - name: Discover Containerfiles
        run: echo cf_matrix=$(ci/discover_cfs.sh ${{ env.UPSTREAM_BRANCH }}) >> $GITHUB_ENV
      - name: Filter container files with no changes
        if: >-
            github.event_name != 'workflow_dispatch' ||
            (github.event_name == 'workflow_dispatch' && github.event.inputs.run_all == 'false')
        run: |
            echo cf_matrix=`echo "$cf_matrix" | jq '.include[].changed=true'` >> $GITHUB_ENV
      - name: Set matrix to containerfiles that need to be tested
        id: set-matrix
        run: echo '::set-output name=matrix::${{ env.cf_matrix }}'
      - name: Echo matrix variable
        run: echo '${{ steps.set-matrix.outputs.matrix }}'
      - name: Parse matrix using fromJSON
        run: echo ${{ fromJSON(steps.set-matrix.outputs.matrix) }}

  build-push-test:
    needs: find-cfs
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJSON(needs.find-cfs.outputs.matrix) }}
      fail-fast: false
    name: ${{ matrix.benchmark }} (${{ matrix.arch }})
    steps:
      - uses: actions/checkout@v2
      - name: Echo Matrix Permutation
        run: |
            cat << EOF
            ${{ toJSON(matrix) }}
            EOF
      - name: Install podman
        run: sudo apt install -y podman
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Upgrade pip and setuptools
        run: python -m pip install --upgrade pip setuptools
      - name: Install benchmark-wrapper
        run: pip install .
      - name: Install test dependencies
        run: pip install snafu[testsci]
      - name: Build ${{ matrix.containerfile }}
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          arch: ${{ matrix.arch }}
          image: ${{ matrix.image_name }}
          tags: ${{ matrix.tag_prefix }}${{ github.sha }}
          dockerfiles: ${{ matrix.containerfile }}
      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_USER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Print image URL
        run: echo "Image pushed to ${{ steps.push-image.outputs.registry-paths }}"
      - name: Set benchmark image environment variable
        run: echo ${{ matrix.env_var }}=${{ fromJSON(steps.push-image.outputs.registry-paths)[0] }} >> $GITHUB_ENV
      - name: Run functional tests
        run: tox -e functional -- -m ${{ matrix.benchmark }}
