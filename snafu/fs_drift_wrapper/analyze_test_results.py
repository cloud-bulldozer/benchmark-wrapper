##!/usr/bin/python3
# script to calculate statistics from raw elasticsearch results
# generated by benchmark-wrapper/smallfile

import json
import os
import sys

import numpy

from snafu.utils import fetch_es_test_results

KiB_per_MiB = 1 << 10
debug = os.getenv("DEBUG")


class FSDStatException(Exception):
    pass


index_name = "ripsaw-fs-drift-results"
# used by strptime()
datetime_format = "%Y-%m-%dT%H:%M:%S.%f%z"

if len(sys.argv) < 2:
    print("ERROR: must supply uuid of test")
    sys.exit(1)

uuid = sys.argv[1]
print("uuid is %s" % uuid)

sample_dict = {}
max_sample = 0
threads_per_pod = None
pods_per_run = 0

es = fetch_es_test_results.connect_es()
hit_generator = fetch_es_test_results.next_result(es, index_name, uuid)
for hit in hit_generator:
    src = hit["_source"]
    uuid_found = src["uuid"]
    if debug:
        print(json.dumps(src, indent=2))
    sample = int(src["sample"])
    files = int(src["files"])
    records = int(src["ios"])
    MiB = float(src["MiB"])
    files_per_sec = float(src["files-per-sec"])
    MiB_per_sec = float(src["MiB-per-sec"])
    elapsed = float(src["elapsed"])
    iops = float(src["IOPS"])
    thrd_id = int(src["thr-id"])
    # host is really pod name
    host = src["host"]
    if not threads_per_pod:
        threads_per_pod = int(src["params"]["threads"])

    # build up a tree sample -> pod -> thread
    # so we can compute stats

    if max_sample < sample:
        max_sample = sample

    # sample layer
    try:
        sample_pods = sample_dict[sample]
    except KeyError:
        sample_pods = {}
        sample_dict[sample] = sample_pods

    # pod layer
    try:
        sample_threads = sample_pods[host]
    except KeyError:
        sample_threads = {}
        sample_pods[host] = sample_threads

    # thread layer (can be multiple threads per pod)
    try:
        any_prev_tupl = sample_threads[thrd_id]
        raise FSDStatException("2 samples with same host/pod and thread ID should not happen: %s" % str(src))
    except KeyError:
        # this is the NORMAL case
        tupl = (elapsed, files, files_per_sec, MiB_per_sec, iops)
        sample_threads[thrd_id] = tupl


# now validate data

print("")

print("   sample, pod,                                  thread, files, files/sec, MiB/s, IOPS, elapsed, %dev")
sample_list_keys = sorted(sample_dict.keys())
fps_samples = []
for s in sorted(sample_list_keys):
    sample_pods = sample_dict[s]
    sample_pods_keys = sample_pods.keys()
    if pods_per_run == 0:
        pods_per_run = len(sample_pods_keys)
    elif len(sample_pods_keys) < pods_per_run:
        print(
            "WARNING: only %d pods found in sample %d, expected %d" % (len(sample_pods_keys), s, pods_per_run)
        )
    total_files = 0
    total_files_per_sec = 0.0
    total_MiB_per_sec = 0.0
    total_iops = 0.0
    elapsed_times = []
    for p in sorted(sample_pods_keys):
        sample_threads = sample_pods[p]
        sample_threads_keys = sample_threads.keys()
        if len(sample_threads_keys) != threads_per_pod:
            print("WARNING: only %d threads found, expected %d" % (len(sample_threads_keys), threads_per_pod))
        for t in sorted(sample_threads_keys):
            (elapsed, files, files_per_sec, MB_per_sec, iops) = sample_threads[t]
            total_MiB_per_sec += MiB_per_sec
            total_files_per_sec += files_per_sec
            total_iops += iops
            total_files += files
            print(
                "%2d, %-40s, %8s, %d, %f, %f, %f, %f"
                % (s, p, t, files, files_per_sec, MB_per_sec, iops, elapsed)
            )
            elapsed_times.append(elapsed)
    sample_pods["_MiB_per_sec"] = total_MiB_per_sec
    sample_pods["_files_per_sec"] = total_files_per_sec
    sample_pods["_iops"] = total_iops
    sample_pods["_elapsed_mean"] = mean_elapsed = sum(elapsed_times) / len(elapsed_times)
    sample_pods["_elapsed_pctdev"] = pctdev = numpy.std(numpy.array(elapsed_times)) * 100.0 / mean_elapsed
    print(
        "%2d, %-40s, %8s, %d, %f, %f, %f, %f, %f"
        % (
            s,
            "all-pods",
            "all-threads",
            total_files,
            total_files_per_sec,
            total_MiB_per_sec,
            total_iops,
            mean_elapsed,
            pctdev,
        )
    )
    fps_samples.append(total_files_per_sec)
fps_mean_across_samples = numpy.average(fps_samples)
fps_pctdev_across_samples = 100.0 * numpy.std(fps_samples) / fps_mean_across_samples
print("mean fps {:f}, % dev fps {:f}".format(fps_mean_across_samples, fps_pctdev_across_samples))
if len(fps_samples) < 3:
    print("WARNING: only %d samples, percent deviation cannot be measured" % (len(fps_samples)))
